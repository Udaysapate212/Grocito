{"ast":null,"code":"import { apiRequest } from \"./api\";\nconst dashboardAPI = {\n  // Get dashboard data\n  getDashboard: async () => {\n    return await apiRequest(\"/delivery-partner-dashboard/dashboard\", \"GET\");\n  },\n  // Toggle availability\n  toggleAvailability: async isAvailable => {\n    return await apiRequest(\"/delivery-partner-dashboard/toggle-availability\", \"POST\", {\n      isAvailable\n    });\n  },\n  // Get partner statistics\n  getStats: async () => {\n    return await apiRequest(\"/delivery-partner-dashboard/stats\", \"GET\");\n  },\n  // Get partner statistics (alias for Redux compatibility)\n  getPartnerStats: async partnerId => {\n    return await apiRequest(\"/delivery-partner-dashboard/stats\", \"GET\");\n  },\n  // Update availability (for Redux compatibility)\n  updateAvailability: async (partnerId, isAvailable, availabilityStatus) => {\n    return await apiRequest(\"/delivery-partner-dashboard/toggle-availability\", \"POST\", {\n      isAvailable\n    });\n  },\n  // Update location (placeholder for future implementation)\n  updateLocation: async (partnerId, latitude, longitude) => {\n    // This endpoint doesn't exist yet, return success for now\n    return {\n      success: true,\n      currentLatitude: latitude,\n      currentLongitude: longitude\n    };\n  },\n  // Send heartbeat to keep partner alive\n  heartbeat: async () => {\n    return await apiRequest(\"/delivery-partner-dashboard/heartbeat\", \"POST\");\n  }\n};\nexport default dashboardAPI;","map":{"version":3,"names":["apiRequest","dashboardAPI","getDashboard","toggleAvailability","isAvailable","getStats","getPartnerStats","partnerId","updateAvailability","availabilityStatus","updateLocation","latitude","longitude","success","currentLatitude","currentLongitude","heartbeat"],"sources":["C:/Users/Uday/Downloads/Grocito/Grocito/grocito-frontend-delivery-partner/src/services/dashboardAPI.js"],"sourcesContent":["import { apiRequest } from \"./api\";\r\n\r\nconst dashboardAPI = {\r\n  // Get dashboard data\r\n  getDashboard: async () => {\r\n    return await apiRequest(\"/delivery-partner-dashboard/dashboard\", \"GET\");\r\n  },\r\n\r\n  // Toggle availability\r\n  toggleAvailability: async (isAvailable) => {\r\n    return await apiRequest(\r\n      \"/delivery-partner-dashboard/toggle-availability\",\r\n      \"POST\",\r\n      {\r\n        isAvailable,\r\n      }\r\n    );\r\n  },\r\n\r\n  // Get partner statistics\r\n  getStats: async () => {\r\n    return await apiRequest(\"/delivery-partner-dashboard/stats\", \"GET\");\r\n  },\r\n\r\n  // Get partner statistics (alias for Redux compatibility)\r\n  getPartnerStats: async (partnerId) => {\r\n    return await apiRequest(\"/delivery-partner-dashboard/stats\", \"GET\");\r\n  },\r\n\r\n  // Update availability (for Redux compatibility)\r\n  updateAvailability: async (partnerId, isAvailable, availabilityStatus) => {\r\n    return await apiRequest(\r\n      \"/delivery-partner-dashboard/toggle-availability\",\r\n      \"POST\",\r\n      {\r\n        isAvailable,\r\n      }\r\n    );\r\n  },\r\n\r\n  // Update location (placeholder for future implementation)\r\n  updateLocation: async (partnerId, latitude, longitude) => {\r\n    // This endpoint doesn't exist yet, return success for now\r\n    return {\r\n      success: true,\r\n      currentLatitude: latitude,\r\n      currentLongitude: longitude,\r\n    };\r\n  },\r\n\r\n  // Send heartbeat to keep partner alive\r\n  heartbeat: async () => {\r\n    return await apiRequest(\"/delivery-partner-dashboard/heartbeat\", \"POST\");\r\n  },\r\n};\r\n\r\nexport default dashboardAPI;\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,MAAMC,YAAY,GAAG;EACnB;EACAC,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,OAAO,MAAMF,UAAU,CAAC,uCAAuC,EAAE,KAAK,CAAC;EACzE,CAAC;EAED;EACAG,kBAAkB,EAAE,MAAOC,WAAW,IAAK;IACzC,OAAO,MAAMJ,UAAU,CACrB,iDAAiD,EACjD,MAAM,EACN;MACEI;IACF,CACF,CAAC;EACH,CAAC;EAED;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,OAAO,MAAML,UAAU,CAAC,mCAAmC,EAAE,KAAK,CAAC;EACrE,CAAC;EAED;EACAM,eAAe,EAAE,MAAOC,SAAS,IAAK;IACpC,OAAO,MAAMP,UAAU,CAAC,mCAAmC,EAAE,KAAK,CAAC;EACrE,CAAC;EAED;EACAQ,kBAAkB,EAAE,MAAAA,CAAOD,SAAS,EAAEH,WAAW,EAAEK,kBAAkB,KAAK;IACxE,OAAO,MAAMT,UAAU,CACrB,iDAAiD,EACjD,MAAM,EACN;MACEI;IACF,CACF,CAAC;EACH,CAAC;EAED;EACAM,cAAc,EAAE,MAAAA,CAAOH,SAAS,EAAEI,QAAQ,EAAEC,SAAS,KAAK;IACxD;IACA,OAAO;MACLC,OAAO,EAAE,IAAI;MACbC,eAAe,EAAEH,QAAQ;MACzBI,gBAAgB,EAAEH;IACpB,CAAC;EACH,CAAC;EAED;EACAI,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,OAAO,MAAMhB,UAAU,CAAC,uCAAuC,EAAE,MAAM,CAAC;EAC1E;AACF,CAAC;AAED,eAAeC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}