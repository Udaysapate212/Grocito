{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport dashboardAPI from '../../services/dashboardAPI';\n\n// Async thunks\nexport const fetchDashboardStats = createAsyncThunk('dashboard/fetchStats', async (partnerId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await dashboardAPI.getPartnerStats(partnerId);\n    return response;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to fetch dashboard stats');\n  }\n});\nexport const updateAvailability = createAsyncThunk('dashboard/updateAvailability', async ({\n  partnerId,\n  isAvailable,\n  availabilityStatus\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await dashboardAPI.updateAvailability(partnerId, isAvailable, availabilityStatus);\n    return response;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to update availability');\n  }\n});\nexport const updateLocation = createAsyncThunk('dashboard/updateLocation', async ({\n  partnerId,\n  latitude,\n  longitude\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await dashboardAPI.updateLocation(partnerId, latitude, longitude);\n    return response;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to update location');\n  }\n});\n\n// Initial state\nconst initialState = {\n  stats: {\n    totalDeliveries: 0,\n    successfulDeliveries: 0,\n    successRate: 0,\n    averageRating: 0,\n    totalEarnings: 0,\n    activeOrders: 0,\n    completedToday: 0,\n    availabilityStatus: 'OFFLINE',\n    isAvailable: false\n  },\n  partner: null,\n  loading: false,\n  error: null,\n  lastUpdated: null,\n  locationUpdateLoading: false\n};\n\n// Dashboard slice\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    updateStatsLocally: (state, action) => {\n      state.stats = {\n        ...state.stats,\n        ...action.payload\n      };\n    },\n    incrementActiveOrders: state => {\n      state.stats.activeOrders += 1;\n    },\n    decrementActiveOrders: state => {\n      if (state.stats.activeOrders > 0) {\n        state.stats.activeOrders -= 1;\n      }\n    },\n    incrementCompletedToday: state => {\n      state.stats.completedToday += 1;\n      state.stats.totalDeliveries += 1;\n      state.stats.successfulDeliveries += 1;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch Dashboard Stats\n    .addCase(fetchDashboardStats.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchDashboardStats.fulfilled, (state, action) => {\n      state.loading = false;\n      state.stats = action.payload;\n      state.lastUpdated = new Date().toISOString();\n      state.error = null;\n    }).addCase(fetchDashboardStats.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Update Availability\n    .addCase(updateAvailability.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(updateAvailability.fulfilled, (state, action) => {\n      state.loading = false;\n      state.partner = action.payload;\n      state.stats.availabilityStatus = action.payload.availabilityStatus;\n      state.stats.isAvailable = action.payload.isAvailable;\n      state.error = null;\n    }).addCase(updateAvailability.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Update Location\n    .addCase(updateLocation.pending, state => {\n      state.locationUpdateLoading = true;\n    }).addCase(updateLocation.fulfilled, (state, action) => {\n      state.locationUpdateLoading = false;\n      if (state.partner) {\n        state.partner.currentLatitude = action.payload.currentLatitude;\n        state.partner.currentLongitude = action.payload.currentLongitude;\n      }\n    }).addCase(updateLocation.rejected, (state, action) => {\n      state.locationUpdateLoading = false;\n      // Don't show location update errors to user as they're not critical\n    });\n  }\n});\nexport const {\n  clearError,\n  updateStatsLocally,\n  incrementActiveOrders,\n  decrementActiveOrders,\n  incrementCompletedToday\n} = dashboardSlice.actions;\nexport default dashboardSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","dashboardAPI","fetchDashboardStats","partnerId","rejectWithValue","response","getPartnerStats","error","_error$response","_error$response$data","data","updateAvailability","isAvailable","availabilityStatus","_error$response2","_error$response2$data","updateLocation","latitude","longitude","_error$response3","_error$response3$data","initialState","stats","totalDeliveries","successfulDeliveries","successRate","averageRating","totalEarnings","activeOrders","completedToday","partner","loading","lastUpdated","locationUpdateLoading","dashboardSlice","name","reducers","clearError","state","updateStatsLocally","action","payload","incrementActiveOrders","decrementActiveOrders","incrementCompletedToday","extraReducers","builder","addCase","pending","fulfilled","Date","toISOString","rejected","currentLatitude","currentLongitude","actions","reducer"],"sources":["C:/Users/Uday/Downloads/Grocito/Grocito/grocito-frontend-delivery-partner/src/store/slices/dashboardSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport dashboardAPI from '../../services/dashboardAPI';\r\n\r\n// Async thunks\r\nexport const fetchDashboardStats = createAsyncThunk(\r\n  'dashboard/fetchStats',\r\n  async (partnerId, { rejectWithValue }) => {\r\n    try {\r\n      const response = await dashboardAPI.getPartnerStats(partnerId);\r\n      return response;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.error || 'Failed to fetch dashboard stats');\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateAvailability = createAsyncThunk(\r\n  'dashboard/updateAvailability',\r\n  async ({ partnerId, isAvailable, availabilityStatus }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await dashboardAPI.updateAvailability(partnerId, isAvailable, availabilityStatus);\r\n      return response;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.error || 'Failed to update availability');\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateLocation = createAsyncThunk(\r\n  'dashboard/updateLocation',\r\n  async ({ partnerId, latitude, longitude }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await dashboardAPI.updateLocation(partnerId, latitude, longitude);\r\n      return response;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.error || 'Failed to update location');\r\n    }\r\n  }\r\n);\r\n\r\n// Initial state\r\nconst initialState = {\r\n  stats: {\r\n    totalDeliveries: 0,\r\n    successfulDeliveries: 0,\r\n    successRate: 0,\r\n    averageRating: 0,\r\n    totalEarnings: 0,\r\n    activeOrders: 0,\r\n    completedToday: 0,\r\n    availabilityStatus: 'OFFLINE',\r\n    isAvailable: false,\r\n  },\r\n  partner: null,\r\n  loading: false,\r\n  error: null,\r\n  lastUpdated: null,\r\n  locationUpdateLoading: false,\r\n};\r\n\r\n// Dashboard slice\r\nconst dashboardSlice = createSlice({\r\n  name: 'dashboard',\r\n  initialState,\r\n  reducers: {\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    updateStatsLocally: (state, action) => {\r\n      state.stats = { ...state.stats, ...action.payload };\r\n    },\r\n    incrementActiveOrders: (state) => {\r\n      state.stats.activeOrders += 1;\r\n    },\r\n    decrementActiveOrders: (state) => {\r\n      if (state.stats.activeOrders > 0) {\r\n        state.stats.activeOrders -= 1;\r\n      }\r\n    },\r\n    incrementCompletedToday: (state) => {\r\n      state.stats.completedToday += 1;\r\n      state.stats.totalDeliveries += 1;\r\n      state.stats.successfulDeliveries += 1;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch Dashboard Stats\r\n      .addCase(fetchDashboardStats.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchDashboardStats.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.stats = action.payload;\r\n        state.lastUpdated = new Date().toISOString();\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchDashboardStats.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Update Availability\r\n      .addCase(updateAvailability.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(updateAvailability.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.partner = action.payload;\r\n        state.stats.availabilityStatus = action.payload.availabilityStatus;\r\n        state.stats.isAvailable = action.payload.isAvailable;\r\n        state.error = null;\r\n      })\r\n      .addCase(updateAvailability.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Update Location\r\n      .addCase(updateLocation.pending, (state) => {\r\n        state.locationUpdateLoading = true;\r\n      })\r\n      .addCase(updateLocation.fulfilled, (state, action) => {\r\n        state.locationUpdateLoading = false;\r\n        if (state.partner) {\r\n          state.partner.currentLatitude = action.payload.currentLatitude;\r\n          state.partner.currentLongitude = action.payload.currentLongitude;\r\n        }\r\n      })\r\n      .addCase(updateLocation.rejected, (state, action) => {\r\n        state.locationUpdateLoading = false;\r\n        // Don't show location update errors to user as they're not critical\r\n      });\r\n  },\r\n});\r\n\r\nexport const { \r\n  clearError, \r\n  updateStatsLocally, \r\n  incrementActiveOrders, \r\n  decrementActiveOrders, \r\n  incrementCompletedToday \r\n} = dashboardSlice.actions;\r\n\r\nexport default dashboardSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}